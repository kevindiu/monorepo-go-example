syntax = "proto3";

package user.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/kevindiu/monorepo-go-example/apis/grpc/user/v1;userv1";

// User represents a user in the system
message User {
  string id = 1;
  string email = 2;
  string name = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

// CreateUserRequest is the request message for CreateUser
message CreateUserRequest {
  string email = 1;
  string name = 2;
}

// CreateUserResponse is the response message for CreateUser
message CreateUserResponse {
  User user = 1;
}

// GetUserRequest is the request message for GetUser
message GetUserRequest {
  string id = 1;
}

// GetUserResponse is the response message for GetUser
message GetUserResponse {
  User user = 1;
}

// ListUsersRequest is the request message for ListUsers
message ListUsersRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// ListUsersResponse is the response message for ListUsers
message ListUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

// UpdateUserRequest is the request message for UpdateUser
message UpdateUserRequest {
  string id = 1;
  string email = 2;
  string name = 3;
}

// UpdateUserResponse is the response message for UpdateUser
message UpdateUserResponse {
  User user = 1;
}

// DeleteUserRequest is the request message for DeleteUser
message DeleteUserRequest {
  string id = 1;
}

// DeleteUserResponse is the response message for DeleteUser
message DeleteUserResponse {
  bool success = 1;
}

// UserService provides user management functionality
service UserService {
  // CreateUser creates a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  // GetUser retrieves a user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{id}"
    };
  }

  // ListUsers retrieves a list of users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // UpdateUser updates an existing user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/v1/users/{id}"
      body: "*"
    };
  }

  // DeleteUser deletes a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{id}"
    };
  }
}
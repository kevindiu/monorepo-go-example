name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: 1.21

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Install tools
      run: make tools

    - name: Generate protobuf code
      run: make proto

    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'make fmt'"
          git diff
          exit 1
        fi

    - name: Run go vet
      run: make vet

    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic -short ./...

    - name: Check test coverage
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${coverage}%"
        if (( $(echo "$coverage < 50" | bc -l) )); then
          echo "Test coverage is below 50%. Please add more tests."
          exit 1
        fi

    - name: Build all services
      run: make build

    - name: Check for vulnerabilities
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: ${{ env.GO_VERSION }}

  proto-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Lint proto files
      run: buf lint

    - name: Check proto breaking changes
      if: github.event_name == 'pull_request'
      run: |
        # Compare against main branch
        buf breaking --against '.git#branch=main'

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: high

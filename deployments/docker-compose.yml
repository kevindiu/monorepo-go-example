version: '3.8'

services:
  # Database
  postgres:
    image: postgres:13
    container_name: monorepo-postgres
    environment:
      POSTGRES_DB: monorepo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./hack/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monorepo-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: deployments/docker/user-service/Dockerfile
    container_name: monorepo-user-service
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - SERVER_GRPC_PORT=9091
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=monorepo
      - DATABASE_SSL_MODE=disable
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    ports:
      - "8081:8081"
      - "9091:9091"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monorepo-network
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: deployments/docker/order-service/Dockerfile
    container_name: monorepo-order-service
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8082
      - SERVER_GRPC_PORT=9092
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=monorepo
      - DATABASE_SSL_MODE=disable
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    ports:
      - "8082:8082"
      - "9092:9092"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monorepo-network
    restart: unless-stopped

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: deployments/docker/gateway/Dockerfile
    container_name: monorepo-gateway
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=9091
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=9092
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - order-service
    networks:
      - monorepo-network
    restart: unless-stopped

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: monorepo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monorepo-network
    restart: unless-stopped

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: monorepo-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./hack/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monorepo-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: monorepo-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./hack/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - monorepo-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: monorepo-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - monorepo-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  monorepo-network:
    driver: bridge